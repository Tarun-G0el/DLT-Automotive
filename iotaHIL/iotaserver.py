"""
@File:      iotaserver.py
@Author:    Tarun Goel
@Date:      23/02/2018
@Comments:	Run on Windows using: 
			set FLASK_APP=IOTAServerSkeleton.py
			flask run
			or with:
		  	python IOTAServerSkeleton.py
"""
# -----------------------------------------------------------------------------------------
## Imports and Substitutions

from flask import Flask, jsonify, request
from iota import *
from iota.adapter.wrappers import RoutingWrapper
from iotasetup import setup
import threading as thread

# -----------------------------------------------------------------------------------------

# Globals

flagPublicServer = False # set to true if testing the service with a real smartphone over 4G; else, leave as false
app = Flask(__name__)

# -----------------------------------------------------------------------------------------

@app.route('/request_light_address', methods=['POST'])
def get_light_addr():
	if request.method == 'POST': # client that wants to use the service requests for the address of the lights to transfer token to
		# get data
		data_in = request.json
		node_address = data_in['Light Node']
		node_id = sheet.find(node_address)
		cell = 'B' + str(node_id.row)
		# respond with address corresponding to the node (i.e. Traffic Light IOTA Address)
		response = {}	# dictionary creation
		response['address'] = sheet.acell(cell).value	# now to read lights 
		return jsonify(response)

@app.route('/request_transaction_read', methods=['POST'])
def get_transaction_id():
	if request.method == 'POST':
		data_in = request.json
		client_transaction_id_value = data_in['transaction_id']		
		print ('Vehicle transaction ID, extracted from the raw data: {}'.format(client_transaction_id_value))
		response = {}
		response['status'] = 'Success! Transaction made at Light node: ' + str(sheet.acell('L2').value)

		return jsonify(response)

@app.route('/return_token', methods=['POST'])
def rule_followed():
	if request.method == 'POST':
		data_in = request.json
		index = int(data_in['Vehicle Index']) + 2
		cell = 'K' + str(index)
		print(cell)
		client_address_value = sheet.acell(cell).value
		iotaAPIWithLocalPoW = Iota(RoutingWrapper('https://nodes.thetangle.org:443').add_route('attachToTangle', 'http://localhost:14265'), seed = b'XUFCORFPGGCXJNSROYIFWWZGGRNUGIZARFZUIDZJOGPPMAFRGRLATGTMDSQDUBLRWMAGWRUHAOSFMSRHJ')
		# Sends an empty transfer using the adapter.
		send_transfer_response = iotaAPIWithLocalPoW.send_transfer(
			depth = 1,
			transfers = [
				ProposedTransaction(
					address = Address(client_address_value), # recipient of the transfer
					value = 0, # amount of IOTA to transfer; this value may be zero
					tag = Tag(b'999999999999999999999999999'), # optional tag to attach to the transfer
					message = TryteString.from_string('This is a test message.'), # optional message to include with the transfer
				),
			],
		)
		bundle = send_transfer_response['bundle']
		print ('Number of transactions associated with this bundle: {}'.format(len(bundle.transactions)))
		for i in range(len(bundle.transactions)):
			transaction = bundle.transactions[i]
			if transaction.address == client_address_value: # transaction.address is the address associated with this transaction
				TRANSACTION_ID = str(transaction.hash) # the transaction hash is used to uniquely identify the transaction on the Tangle; the value is generated by taking a hash of the raw transaction trits
													   # we assume in the code here that a single transaction was made to the recipient's address; otherwise, the code must be modified so that multiple TRANSACTION_IDs are stored
				print ('{}. Transaction ID: {}'.format(i+1, TRANSACTION_ID))
			else:
				TRANSACTION_ID = 'This transaction was not intended for the client.'
				print ('{}. {}'.format(i+1, TRANSACTION_ID))
		
		response = {}
		response['transaction_id'] = TRANSACTION_ID # string
		
		return jsonify(response)

# -----------------------------------------------------------------------------------------

if __name__ == '__main__':

	FlaskPort = 5353 # IF TESTING THE SERVICE WITH A REAL SMARTPHONE OVER 4G, REPLACE 2222 WITH THE PORT NUMBER OF YOUR MACHINE THAT YOU WANT TO OPEN TO THE OUTSIDE WORLD
	sheet = setup()

	if flagPublicServer:
		app.run(debug=True, use_reloader=False, port=FlaskPort, host='0.0.0.0', threaded=True) # for testing the service with a real smartphone over 4G
	else:
		app.run(debug=True, use_reloader=False, port=8080, threaded=True) # for testing the service with Android Studio's smartphone emulator

# -----------------------------------------------------------------------------------------